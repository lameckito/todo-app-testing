name: Todo App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend API Testing
  api-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Run API tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Archive coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.node-version }}
        path: coverage/
        retention-days: 7

  # Frontend E2E Testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: api-tests
    
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install backend dependencies
      run: npm ci
    
    - name: Setup frontend
      run: |
        mkdir -p frontend
        cd frontend
        npm init -y
        npm install react react-dom react-scripts
        # Copy App.js from artifacts here
    
    - name: Install Cypress dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
    
    - name: Start backend server
      run: |
        npm start &
        npx wait-on http://localhost:5000/api/health --timeout 60000
      env:
        NODE_ENV: test
    
    - name: Start frontend server
      run: |
        cd frontend && npm start &
        npx wait-on http://localhost:3000 --timeout 60000
      env:
        BROWSER: none
        CI: true
    
    - name: Run Cypress E2E tests
      uses: cypress-io/github-action@v6
      with:
        browser: ${{ matrix.browser }}
        wait-on: 'http://localhost:3000, http://localhost:5000/api/health'
        wait-on-timeout: 60
        config: baseUrl=http://localhost:3000
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Cypress artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-artifacts-${{ matrix.browser }}
        path: |
          cypress/screenshots
          cypress/videos
        retention-days: 7

  # Security and Quality Checks
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Run dependency vulnerability check
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npx eslint . --ext .js,.jsx --format json --output-file eslint-report.json
      continue-on-error: true
    
    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: eslint-report.json
        retention-days: 7
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start backend server
      run: |
        npm start &
        npx wait-on http://localhost:5000/api/health --timeout 60000
    
    - name: Run API performance tests
      run: |
        npx autocannon -c 10 -d 10 -p 10 http://localhost:5000/api/health
        npx autocannon -c 5 -d 5 -m POST -H "Content-Type: application/json" -b '{"username":"admin","password":"password"}' http://localhost:5000/api/login
      continue-on-error: true

  # Build and Deploy Preview
  build-preview:
    runs-on: ubuntu-latest
    needs: [api-tests, e2e-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Deploy to staging
      run: echo "Deploy to staging environment"
      # Add your deployment commands here

  # Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [api-tests, e2e-tests, security-audit, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-production-url.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --only=production
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Deploy to production
      run: echo "Deploy to production environment"
      # Add your production deployment commands here
      env:
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [api-tests, e2e-tests, security-audit, code-quality]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: env.SLACK_WEBHOOK_URL != null

# Environment variables for all jobs
env:
  CI: true
  NODE_ENV: test
  JWT_SECRET: test-secret-key-for-ci
